{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","onSearch","event","setState","target","value","react_default","a","createElement","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","components_Track_Track","key","id","SearchResults","components_TrackList_TrackList","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris","App","searchResults","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","_this2","_this3","components_SearchBar_SearchBar","components_SearchResults_SearchResults","components_Playlist_Playlist","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","components_App_App"],"mappings":"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","file":"static/js/main.139a017f.chunk.js","sourcesContent":["\nconst cliendId = '605d4a13c81549fe853bf0a7fdfe13e0';\nconst redirectUri = \"http://nosy-nerve.surge.sh\";\n\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n\n        // Check for access token match \n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n// Clear the parameters from the URL, so the app doesnâ€™t try grabbing the access token after it has expired\n\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n\n            return accessToken;\n\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${cliendId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n            window.location = accessUrl;\n        }\n    }, \n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n        { headers: {\n            Authorization: `Bearer ${accessToken}`\n        }\n    }).then(response => {\n        return response.json();\n    }).then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n            return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artists: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n        }));\n    });\n    },\n    \n    savePlayList(name, trackURIs) {\n        if (!name || !trackURIs.length) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}`};\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`/v1/users/${userId}/playlists/${playlistId}/tracks`,\n                {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackURIs })\n                })\n            })\n        })\n    }\n\n}\n\nexport default Spotify;","import React from \"react\";\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            term: ''\n        }\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n        this.setState({ term: event.target.value });\n    }\n\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n  <input  placeholder=\"Enter A Song, Album, or Artist\" \n  onChange={this.handleTermChange}\n  />\n  <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n</div>\n        )\n    }\n}\n\nexport default SearchBar;\n\n\n","import React from \"react\";\nimport './Track.css';\n\nclass Track extends React.Component {\nconstructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n}\n    renderAction() {\n        if(this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        } else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n        }\n    }\n    \n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n  <div className=\"Track-information\">\n    <h3> {this.props.track.name} </h3>\n    <p> {this.props.track.artist} | {this.props.track.album}  </p>\n  </div>\n{this.renderAction()}\n</div>\n        )\n    }\n}\n\nexport default Track;","import React from \"react\";\nimport './TrackList.css';\nimport Track from \"../Track/Track\";\n\nclass TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map(track => {\n                        return <Track \n                        track={track} \n                        key={track.id}\n                        onAdd={this.props.onAdd}\n                        onRemove={this.props.onRemove}\n                        isRemoval={this.props.isRemoval}\n                        />\n                    })\n                }\n</div>\n        )\n    }\n}\n\nexport default TrackList;","import React from \"react\";\nimport './SearchResults.css';\nimport TrackList from \"../TrackList/TrackList\";\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n            <h2>Results</h2>\n            <TrackList tracks={this.props.SearchResults} \n            onAdd={this.props.onAdd}\n            isRemoval={false}\n            /> \n           \n            </div>\n        )\n    }\n}\n\nexport default SearchResults;","import React from \"react\";\nimport './Playlist.css';\nimport TrackList from \"../TrackList/TrackList\";\n\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n    render() {\n        return (\n            <div className=\"Playlist\">\n  <input defaultValue={'New Playlist'} \n  onChange={this.handleNameChange} \n  />\n   <TrackList \n   tracks={this.props.playlistTracks}\n   onRemove={this.props.onRemove}\n   isRemoval={true}\n   /> \n \n  <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n</div>\n        )\n    }\n}\nexport default Playlist;","\nimport React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n\n \n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if(tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\nthis.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlayList(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n\n    }\n\n  search(term) {\nSpotify.search(term).then(searchResults => {\n  this.setState({searchResults: searchResults});\n});\n  }\n\n  render() {\n    return (\n      <div>\n  <h1>\n    Ja<span className=\"highlight\">mmm</span>ing\n    </h1>\n    <h2 className='description'>Create a new Playlist for your Lifestyle\n    <br></br>\n    <span className='detail-text'>Add your favorite Music to your Spotify Account </span>\n    </h2>\n  <div className=\"App\">\n    <SearchBar \n    onSearch={this.search}/> \n    <div className=\"App-playlist\">\n     <SearchResults \n     SearchResults={this.state.searchResults} \n     onAdd={this.addTrack} \n     /> \n     <Playlist \n     playlistName={this.state.playlistName} \n     playlistTracks={this.state.playlistTracks} \n     onRemove={this.removeTrack}\n     onNameChange={this.updatePlaylistName}\n     onSave={this.savePlaylist}\n     /> \n    </div>\n  </div>\n</div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}